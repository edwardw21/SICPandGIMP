(load-option 'synchronous-subprocess)
(define available-procedures '(brighten))

(define (assert predicate item . error-msg)
  (define msg (if (null? error-msg)
		  "assertion failed"
		  (car error-msg)))
  (if (not (predicate item))
      (error msg)))

(define (ensure-string inp)
  (assert (lambda (x) (or (string? x) (symbol? x))) inp)
  (if (symbol? inp)
      (symbol->string inp)
      inp))

(define ensure-string
  (simple-generic-procedure 'enure-string 1 #f))

(define-generic-procedure-handler ensure-string
  (match-args string?)
  (lambda (value) value))

(define-generic-procedure-handler ensure-string
  (match-args number?)
  (lambda (value)
    (number->string value)))

(define-generic-procedure-handler ensure-string
  (match-args symbol?)
  (lambda (value)
    (symbol->string value)))

(define (list->spaced-string lst)
  (if (null? lst)
      ""
      (string-append
       (ensure-string (car lst))
       (let ((cdr-string (list->spaced-string (cdr lst))))
	 (if (equal? cdr-string "")
	     cdr-string
	     (string-append " " cdr-string))))))

(define-generic-procedure-handler ensure-string
  (match-args list?)
  (lambda (value)
    (list->spaced-string value)))

(define-generic-procedure-handler ensure-string
  (match-args boolean?)
  (lambda (value)
    (if value "#t" "#f")))

(define (build-command procedure-name input-file output-file args)
  (string-append
    "gimp -i -b '("
    (ensure-string procedure-name)
    " \""
    (ensure-string input-file)
    "\" \""
    (ensure-string output-file)
    (let ((arg-string (ensure-string args))
	  (command-termination ")' -b '(gimp-quit 0)'"))
      (if (equal? arg-string "")
	  (string-append "\"" command-termination)
	  (string-append "\" " arg-string command-termination)))))

(define (call-procedure procedure-name input-file output-file . args)
  (run-shell-command (build-command
		      procedure-name
		      input-file
		      output-file
		      args)))

(define (files-in-directory)
  (define write-port (interaction-i/o-port))
  (call-with-port write-port
    (lambda (port)
    (run-shell-command "ls"
      'output port
      'output-buffer-size 4096
      'shell-file-name "/bin/bash")))
  (close-port write-port))
